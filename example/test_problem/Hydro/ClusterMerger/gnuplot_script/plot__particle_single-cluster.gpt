
# -----------------------------------------------------------
# GNUPLOT plot particle v1.1 (09/19/2014)
# 1. Support different views  --> VIEW
# 2. Support double precision --> FLOAT8
#
# GNUPLOT plot particle v1.0 (07/23/2014)
# 1. First version
# -----------------------------------------------------------


reset


# target files
# -----------------------------------------------------------
FILE_IN_PREFIX  = 'Particle'
FILE_IN_SUFFIX  = ''
FILE_OUT_PREFIX = 'Fig__Particle'
START_ID        = 0
END_ID          = 52
DELTA_ID        = 1
PAUSE           = 0.10  # <= 0.0 --> mouse
VIEW            = 1     # (0/1/2/3) = 3D/xy/yz/xz


# terminal
# -----------------------------------------------------------
 set term x11 enhanced
#set term png enhanced crop size 1280,800 font ",16"
#set term postscript eps enhanced color 'Helvetica' 16


# plot style
# -----------------------------------------------------------
#set key reverse Left spacing 2 right
#set format x "10^{%T}"
#set format y "10^{%T}"
 set pointsize 0.6
#set xyplane at 0.0
 set xrange [0.0:15.0]
 set yrange [0.0:15.0]
 set zrange [0.0:15.0]

 if ( VIEW == 0 ) { set view equal xyz; set xlabel "x [code unit]"; set ylabel "y [code unit]"; set zlabel "z [code unit]"; }
 if ( VIEW == 1 ) { set size ratio -1 ; set xlabel "x [code unit]"; set ylabel "y [code unit]"; }
 if ( VIEW == 2 ) { set size ratio -1 ; set xlabel "y [code unit]"; set ylabel "z [code unit]"; }
 if ( VIEW == 3 ) { set size ratio -1 ; set xlabel "x [code unit]"; set ylabel "z [code unit]"; }


#units and physical constants in CGS
# -----------------------------------------------------------
UNIT_T = 3.08567758149000e+17
Gyr    = 3.15569252e16


# set the output file extension automatically
# -----------------------------------------------------------
if      ( GPVAL_TERM eq 'pngcairo'   ) FILE_OUT_EXT='png'; \
else if ( GPVAL_TERM eq 'png'        ) FILE_OUT_EXT='png'; \
else if ( GPVAL_TERM eq 'postscript' ) FILE_OUT_EXT='eps'; \
else if ( GPVAL_TERM ne 'x11'        ) print 'Unkown terminal for settting the output file extension !!'; quit


# loop over all files
# -----------------------------------------------------------
print "Start plotting ..."

do for [ID=START_ID:END_ID:DELTA_ID] {

#  set the input and output filenames
   ID1     = ID%10
   ID2     = (ID%100)/10
   ID3     = (ID%1000)/100
   ID4     = ID/1000
   FILE_IN = sprintf( '%s_00%d%d%d%d%s.txt', FILE_IN_PREFIX, ID4, ID3, ID2, ID1, FILE_IN_SUFFIX )

   if ( GPVAL_TERM ne 'x11' ) { set output sprintf( '%s_00%d%d%d%d.%s', FILE_OUT_PREFIX, ID4, ID3, ID2, ID1, FILE_OUT_EXT ) }


#  load the physical time
   RECORD__DUMP = './Record__Dump'
   NHEADER      = 1
   LOAD_TIME    = sprintf( "awk '{if(NR==%d+%d) {print $2}}' %s", NHEADER, ID+1, RECORD__DUMP )
   TIME         = system( LOAD_TIME )*UNIT_T/Gyr


#  set title
   set title sprintf( 'DataID %d%d%d%d (t = %5.2f Gyr)', ID4, ID3, ID2, ID1, TIME )
   print sprintf( '   Plotting DataID %d%d%d%d (t = %5.2f Gyr) ...', ID4, ID3, ID2, ID1, TIME )


   if ( VIEW == 0 ) { splot FILE_IN u 2:3:4 w p pt 5 notitle }
   if ( VIEW == 1 ) {  plot FILE_IN u 2:3   w p pt 5 notitle, FILE_IN u 2:3 every ::   0::   0 w p pt 7 ps 1 lc 4 notit, \
                                                              FILE_IN u 2:3 every ::1000::1000 w p pt 7 ps 1 lc 5 notit, \
                                                              FILE_IN u 2:3 every ::2000::2000 w p pt 7 ps 1 lc 3 notit, \
                                                              FILE_IN u 2:3 every ::3000::3000 w p pt 7 ps 1 lc 7 notit, \
                                                              FILE_IN u 2:3 every ::4000::4000 w p pt 7 ps 1 lc 8 notit }
   if ( VIEW == 2 ) {  plot FILE_IN u 3:4   w p pt 5 notitle }
   if ( VIEW == 3 ) {  plot FILE_IN u 2:4   w p pt 5 notitle }


   if ( GPVAL_TERM eq 'x11' ) { if ( PAUSE <= 0.0 ) { pause mouse }   else { pause PAUSE } };

} #do for [ID=START_ID:END_ID:DELTA_ID]


print "Done";
if ( GPVAL_TERM eq 'x11' ) { pause -1 };
