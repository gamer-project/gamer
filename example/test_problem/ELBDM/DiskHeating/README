Compilation flags:
========================================
Enable  : MODEL=ELBDM, GRAVITY, PARTICLE, STORE_PAR_ACC, SUPPORT_HDF5,
          SUPPORT_GSL (optional, only useful for thin disk)

Disable : COMOVING


Note:
========================================
DiskHeatingParticleIC uses the floating-point type for particle type and assumes single precision


Quick start:
=======================================
0. Copy "generate_make.sh" to the directory "src", execute "sh generate_make.sh" to generate "Makefile",
   and then execute "make clean" and "make -j 4" to generate the executable "gamer"

1. Download initial conditions of m_22=0.4, M_h=7e10 Msun halo and stellar disk with "sh download_ic.sh"

2. Ensure PAR_INIT = 1 and OPT__INIT = 3 in Input__Parameter

3. Default END_T is 2.5e-1 (about 3.5 Gyr) as in Yang et al. 2023 and OUTPUT_DT is 1.0e-2 (about 0.14 Gyr)

4. To switch to a high-resolution run, command "ln -sf ic_files/PAR_IC_0.4_M7 DiskHeatingParticleIC"
   Set PAR_NPAR=80000000, MAX_LEVEL=3, and change all values in Input__Flag_NParPatch to 800


General initial condition setup:
========================================
1. Disk

   a. Generate the disk via modified GALIC (https://github.com/HsunYeong/GALIC.git)
      The snapshots have the filenames snap_XXX.hdf5

   b. Set the filename, units in get_par_ic.py to match the GALIC set-up

   c. Set center to be location of the soliton in get_par_ic.py

   d. Execute get_par_ic.py, it will generate DiskHeatingParticleIC

2. Halo

   a. If the data is binary file UM_IC

      * Set OPT__INIT = 3 and PAR_INIT = 1
      * Input__UM_IC_RefineRegion is required

   b. If the data is GAMER snapshot

      * Command "ln -s Data_XXXXXX RESTART" to create a soft link
      * Set OPT__INIT = 2 and PAR_INIT = 2 in Input__Parameter
      * Turn on AddParWhenRestart and AddParWhenRestartByFile in Input__TestProb
      * Set AddParWhenRestartNPar in Input__TestProb
      * Turn on OPT__RESTART_RESET in Input__Parameter
      # Recommand to turn off AddParWhenRestart, AddParWhenRestartByFile, OPT__RESTART_RESET right after the simulation starts

   c. The code for FDM halo reconstruction (https://github.com/calab-ntu/psidm-halo-reconstruction)

3. Thin disk (optional)

   a. Command "ln -s Data_XXXXXX RESTART" to create a soft link for restart

   b. Set Set OPT__INIT = 2 and PAR_INIT = 2 and turn on OPT__RESTART_RESET in Input__Parameter

   c. Turn on AddParWhenRestart in Input__TestProb

   d. Set AddParWhenRestartNPar, Disk_Mass, Disk_R, and DispTableFile in Input__TestProb


Analysis scripts:
========================================
1. particle_proj.py, plot_halo_slice.py:

   * Plot the projection of disk particles or halo density slice
   * Output files: particle_proj_*.png, Data_*_Slice_x_Dens.png

2. plot_halo_density.py, plot_halo_potential.py:

   * Compute and plot shell-averaged halo density or gravitational potential profiles
   * Output files: Data_*_1d-Profile_radius_Dens.png, Halo_Dens_Data_*.npy,
                   Data_*_1d-Profile_radius_Pote.png, Halo_Pote_Data_*.npy

3. data_disk.py:

   * Compute the disk information (rotation speed, velocity dispersion, surface density, scale height, etc.)
   * Output files: Data_Disk_*.npy

4. data_halo.py:

   * Compute the halo information (enclosed mass, velocity dispersion, etc.)
   * Required files: Halo_Dens_*.npy (generated by "plot_halo_density.py") and Halo_Pote_*.npy (by "plot_halo_potential.py")
   * Output files: Data_Halo_*.npy

5. vel_distribution.py

   * Compute the velocity distribution in 2-kpc-wide radial bins centered on R = 4, 6, 8, 10 kpc
   * Output files: Vel_data_*.npz, vel_*.png

6. get_heating.py

   * Compute the theoretical heating rate of the stellar disk as a function of radius
   * Required files: Data_Disk_*.npy (generated by "data_disk.py"), Data_Halo_*.npy (by "data_halo.py")
   * Output files: Heating_*.npz

7. get_heating_rate_theory.py

   * Get the time-averaged theoretical heating rate
   * Required files: Heating_*.npz (generated by "get_heating.py")
   * Output files: printed plain text

8. get_heating_rate_simulation.py

   * Compute ensemble- and time-averaged disk heating rates measured from simulation data
   * Required files: Vel_data_*.npz (generated by "vel_distribution.py")
   * Output files: sigma_z_sqr.png and printed plain text

9. plot_data_example.py

   * An example script to plot the angle-averaged disk rotation curve and shell-averaged density profile
   * Required files: Data_Disk_*.npy (generated by "data_disk.py") and/or Data_Halo_*.npy (by "data_halo.py")
   * Output files: Rotation_Curve.png, Halo_Density_Profile.png
