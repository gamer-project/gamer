


# ===========================================================================
# INSTRUCTIONS
#
# To compile GAMER, please set the following configurations properly:
#
# (1) simulation options
# (2) compiler and flags
# (3) library paths
# ===========================================================================



# executable
#######################################################################################################
EXECUTABLE := gamer



# output detailed compilation commands (0/1 = off/on)
#######################################################################################################
COMPILE_VERBOSE := 0



# simulation options
#######################################################################################################
SIMU_OPTION  = @@@SIMU_OPTION@@@
SIMU_OPTION += -DGPU_COMPUTE_CAPABILITY=@@@GPU_COMPUTE_CAPABILITY@@@



# compilers and flags
#######################################################################################################
CXX        = @@@CXX@@@
CXXFLAG    = @@@CXXFLAG@@@
LIB        = @@@LIBFLAG@@@
OPENMPFLAG = @@@OPENMPFLAG@@@
NVCC       = $(CUDA_PATH)/bin/nvcc



# library paths
#######################################################################################################
CUDA_PATH    := @@@CUDA_PATH@@@
FFTW2_PATH   := @@@FFTW2_PATH@@@
FFTW3_PATH   := @@@FFTW3_PATH@@@
MPI_PATH     := @@@MPI_PATH@@@
HDF5_PATH    := @@@HDF5_PATH@@@
GRACKLE_PATH := @@@GRACKLE_PATH@@@
GSL_PATH     := @@@GSL_PATH@@@
LIBYT_PATH   := @@@LIBYT_PATH@@@



# source files
#######################################################################################################

# common source files
# -------------------------------------------------------------------------------
# CUDA source files (compiled with nvcc)
GPU_FILE    := CUAPI_Asyn_FluidSolver.cu  CUAPI_DiagnoseDevice.cu  CUAPI_MemAllocate_Fluid.cu \
               CUAPI_MemFree_Fluid.cu  CUAPI_SetMemSize.cu  CUAPI_SetCache.cu  CUAPI_SetDevice.cu \
               CUAPI_Synchronize.cu  CUAPI_Asyn_dtSolver.cu  CUAPI_SetConstMemory.cu  CUAPI_SetConstMemory_EoS.cu \
               CUAPI_MemAllocate.cu


# C/C++ source files (compiled with c++ compiler)
CPU_FILE    := Main.cpp  EvolveLevel.cpp  InvokeSolver.cpp  Prepare_PatchData.cpp \
               InterpolateGhostZone.cpp

CPU_FILE    += Aux_Check_Parameter.cpp  Aux_Check_Conservation.cpp  Aux_Check.cpp  Aux_Check_Finite.cpp \
               Aux_Check_FluxAllocate.cpp  Aux_Check_PatchAllocate.cpp  Aux_Check_ProperNesting.cpp \
               Aux_Check_Refinement.cpp  Aux_Check_Restrict.cpp  Aux_Error.cpp  Aux_GetCPUInfo.cpp \
               Aux_GetMemInfo.cpp  Aux_Message.cpp  Aux_Record_PatchCount.cpp  Aux_TakeNote.cpp  Aux_Timing.cpp \
               Aux_Check_MemFree.cpp  Aux_Record_Performance.cpp  Aux_CheckFileExist.cpp  Aux_Array.cpp \
               Aux_Record_User.cpp  Aux_Record_CorrUnphy.cpp  Aux_Record_Center.cpp  Aux_SwapPointer.cpp  Aux_Check_NormalizePassive.cpp \
               Aux_LoadTable.cpp  Aux_IsFinite.cpp  Aux_ComputeProfile.cpp  Aux_FindExtrema.cpp  Aux_FindWeightedAverageCenter.cpp  Aux_PauseManually.cpp

CPU_FILE    += CPU_FluidSolver.cpp  Flu_AdvanceDt.cpp  Flu_Prepare.cpp  Flu_Close.cpp  Flu_FixUp_Flux.cpp \
               Flu_FixUp_Restrict.cpp  Flu_AllocateFluxArray.cpp  Flu_BoundaryCondition_User.cpp  Flu_ResetByUser.cpp \
               Flu_CorrAfterAllSync.cpp  Flu_ManageFixUpTempArray.cpp  Flu_DerivedField_BuiltIn.cpp \
               Flu_DerivedField_User.cpp

CPU_FILE    += End_GAMER.cpp  End_MemFree.cpp  End_MemFree_Fluid.cpp  End_StopManually.cpp  End_User.cpp \
               Init_BaseLevel.cpp  Init_GAMER.cpp  Init_Load_DumpTable.cpp \
               Init_Load_FlagCriteria.cpp  Init_Load_Parameter.cpp  Init_MemAllocate.cpp \
               Init_MemAllocate_Fluid.cpp  Init_Parallelization.cpp  Init_RecordBasePatch.cpp  Init_Refine.cpp \
               Init_ByRestart_v1.cpp  Init_ByFunction.cpp  Init_TestProb.cpp  Init_ByFile.cpp  Init_OpenMP.cpp \
               Init_ByRestart_HDF5.cpp  Init_ResetParameter.cpp  Init_ByRestart_v2.cpp  Init_MemoryPool.cpp \
               Init_Unit.cpp  Init_UniformGrid.cpp  Init_Field.cpp  Init_User.cpp  Init_FFTW.cpp

CPU_FILE    += Interpolate.cpp  Int_CQuadratic.cpp  Int_MinMod1D.cpp  Int_MinMod3D.cpp  Int_vanLeer.cpp \
               Int_Quadratic.cpp  Int_Table.cpp  Int_CQuartic.cpp  Int_Quartic.cpp

CPU_FILE    += Mis_CompareRealValue.cpp  Mis_GetTotalPatchNumber.cpp  Mis_GetTimeStep.cpp  Mis_Heapsort.cpp \
               Mis_BinarySearch.cpp  Mis_1D3DIdx.cpp  Mis_Matching.cpp  Mis_GetTimeStep_User.cpp \
               Mis_dTime2dt.cpp  Mis_CoordinateTransform.cpp  Mis_BinarySearch_Real.cpp  Mis_InterpolateFromTable.cpp \
               CPU_dtSolver.cpp  dt_Prepare_Flu.cpp  dt_Prepare_Pot.cpp  dt_Close.cpp  dt_InvokeSolver.cpp \
               Mis_UserWorkBeforeNextLevel.cpp  Mis_UserWorkBeforeNextSubstep.cpp \
               Mis_SortByRows.cpp

CPU_FILE    += Output_DumpData_Total.cpp  Output_DumpData.cpp  Output_DumpManually.cpp  Output_PatchMap.cpp \
               Output_DumpData_Part.cpp  Output_FlagMap.cpp  Output_Patch.cpp  Output_PreparedPatch_Fluid.cpp \
               Output_PatchCorner.cpp  Output_Flux.cpp  Output_User.cpp  Output_BasePowerSpectrum.cpp \
               Output_DumpData_Total_HDF5.cpp  Output_L1Error.cpp  Output_UserWorkBeforeOutput.cpp

CPU_FILE    += Flag_Real.cpp  Refine.cpp   SiblingSearch.cpp  SiblingSearch_Base.cpp  FindFather.cpp \
               Flag_User.cpp  Flag_Check.cpp  Flag_Lohner.cpp  Flag_Region.cpp

CPU_FILE    += Table_01.cpp  Table_02.cpp  Table_03.cpp  Table_04.cpp  Table_05.cpp  Table_06.cpp \
               Table_07.cpp  Table_SiblingSharingSameEdge.cpp  Table_SiblingPatch.cpp

vpath %.cu     GPU_API
vpath %.cpp    Main  Init  Refine  Fluid  Interpolation  Tables  Output  Miscellaneous  Auxiliary


# hydrodynamic source files (included only if "MODEL=HYDRO")
# ------------------------------------------------------------------------------------
ifeq "$(filter -DMODEL=HYDRO, $(SIMU_OPTION))" "-DMODEL=HYDRO"
GPU_FILE    += CUFLU_dtSolver_HydroCFL.cu  CUFLU_FluidSolver_RTVD.cu  CUFLU_FluidSolver_MHM.cu  CUFLU_FluidSolver_CTU.cu \
               GPU_EoS_Gamma.cu  GPU_EoS_User_Template.cu  GPU_EoS_Isothermal.cu  GPU_EoS_GammaCR.cu  GPU_EoS_TaubMathews.cu

CPU_FILE    += CPU_FluidSolver_RTVD.cpp  CPU_FluidSolver_MHM.cpp  CPU_FluidSolver_CTU.cpp \
               CPU_Shared_DataReconstruction.cpp  CPU_Shared_FluUtility.cpp  CPU_Shared_ComputeFlux.cpp \
               CPU_Shared_FullStepUpdate.cpp  CPU_Shared_RiemannSolver_Exact.cpp  CPU_Shared_RiemannSolver_Roe.cpp \
               CPU_Shared_RiemannSolver_HLLE.cpp  CPU_Shared_RiemannSolver_HLLC.cpp  CPU_Shared_DualEnergy.cpp \
               CPU_dtSolver_HydroCFL.cpp  CPU_EoS_Gamma.cpp  CPU_EoS_User_Template.cpp  CPU_EoS_Isothermal.cpp \
               CPU_EoS_GammaCR.cpp  CPU_EoS_TaubMathews.cpp

CPU_FILE    += Hydro_Init_ByFunction_AssignData.cpp  Hydro_Aux_Check_Negative.cpp \
               Hydro_BoundaryCondition_Reflecting.cpp  Hydro_BoundaryCondition_Outflow.cpp \
               Hydro_BoundaryCondition_Diode.cpp  EoS_Init.cpp  EoS_End.cpp

vpath %.cu     Model_Hydro/GPU_Hydro  EoS  EoS/Gamma  EoS/User_Template  EoS/Isothermal  EoS/GammaCR  EoS/TaubMathews
vpath %.cpp    Model_Hydro/CPU_Hydro  Model_Hydro  EoS  EoS/Gamma  EoS/User_Template  EoS/Isothermal  EoS/GammaCR  EoS/TaubMathews

ifeq "$(filter -DGRAVITY, $(SIMU_OPTION))" "-DGRAVITY"
GPU_FILE    += CUPOT_HydroGravitySolver.cu  CUPOT_dtSolver_HydroGravity.cu

CPU_FILE    += CPU_HydroGravitySolver.cpp  CPU_dtSolver_HydroGravity.cpp

vpath %.cu     Model_Hydro/GPU_HydroGravity
vpath %.cpp    Model_Hydro/CPU_HydroGravity
endif

ifeq "$(filter -DMHD, $(SIMU_OPTION))" "-DMHD"
CPU_FILE    += MHD_GetCellCenteredBInPatch.cpp  MHD_InterpolateBField.cpp  MHD_AllocateElectricArray.cpp \
               MHD_Aux_Check_InterfaceB.cpp  MHD_FixUp_Electric.cpp  MHD_Aux_Check_DivergenceB.cpp \
               MHD_BoundaryCondition_Outflow.cpp  MHD_BoundaryCondition_Reflecting.cpp  MHD_BoundaryCondition_User.cpp \
               MHD_BoundaryCondition_Diode.cpp  MHD_CopyPatchInterfaceBField.cpp  MHD_Init_BField_ByVecPot_File.cpp \
               MHD_SameInterfaceB.cpp  MHD_Init_BField_ByVecPot_Function.cpp  MHD_ResetByUser.cpp

CPU_FILE    += CPU_Shared_ConstrainedTransport.cpp  CPU_Shared_RiemannSolver_HLLD.cpp

ifeq "$(findstring -DLOAD_BALANCE, $(SIMU_OPTION))" "-DLOAD_BALANCE"
CPU_FILE    += MHD_LB_EnsureBFieldConsistencyAfterRestrict.cpp  MHD_LB_AllocateElectricArray.cpp \
               MHD_LB_ResetBufferElectric.cpp  MHD_LB_Refine_GetCoarseFineInterfaceBField.cpp
endif # LOAD_BALANCE
endif # MHD


# ELBDM source files (included only inf "MODEL=ELBDM")
# -------------------------------------------------------------------------------
else ifeq "$(filter -DMODEL=ELBDM, $(SIMU_OPTION))" "-DMODEL=ELBDM"
GPU_FILE    += CUFLU_ELBDMSolver.cu

CPU_FILE    += CPU_ELBDMSolver.cpp  ELBDM_Init_ByFunction_AssignData.cpp  ELBDM_Init_ByFile_AssignData.cpp \
               ELBDM_GetTimeStep_Fluid.cpp  ELBDM_Flag_EngyDensity.cpp  ELBDM_UnwrapPhase.cpp \
               ELBDM_GetTimeStep_Phase.cpp  ELBDM_SetTaylor3Coeff.cpp

vpath %.cu     Model_ELBDM/GPU_ELBDM
vpath %.cpp    Model_ELBDM/CPU_ELBDM  Model_ELBDM

ifeq "$(filter -DGRAVITY, $(SIMU_OPTION))" "-DGRAVITY"
GPU_FILE    += CUPOT_ELBDMGravitySolver.cu

CPU_FILE    += CPU_ELBDMGravitySolver.cpp  ELBDM_GetTimeStep_Gravity.cpp

vpath %.cu     Model_ELBDM/GPU_ELBDMGravity
vpath %.cpp    Model_ELBDM/CPU_ELBDMGravity
endif

endif # MODEL


# self-gravity source files (included only if "GRAVITY" is turned on)
# ------------------------------------------------------------------------------------
ifeq "$(filter -DGRAVITY, $(SIMU_OPTION))" "-DGRAVITY"
GPU_FILE    += CUAPI_MemAllocate_PoissonGravity.cu  CUAPI_MemFree_PoissonGravity.cu \
               CUAPI_Asyn_PoissonGravitySolver.cu  CUAPI_SetConstMemory_ExtAccPot.cu \
               CUAPI_SendExtPotTable2GPU.cu

GPU_FILE    += CUPOT_PoissonSolver_SOR.cu \
               CUPOT_PoissonSolver_MG.cu  CUPOT_ExtAcc_PointMass.cu  CUPOT_ExtPot_PointMass.cu \
               CUPOT_ExtPotSolver.cu  CUPOT_ExtPot_Tabular.cu

CPU_FILE    += CPU_PoissonGravitySolver.cpp  CPU_PoissonSolver_SOR.cpp  CPU_PoissonSolver_FFT.cpp \
               CPU_PoissonSolver_MG.cpp  CPU_ExtPotSolver.cpp  CPU_ExtPotSolver_BaseLevel.cpp

CPU_FILE    += Gra_Close.cpp  Gra_Prepare_Flu.cpp  Gra_Prepare_Pot.cpp  Gra_Prepare_Corner.cpp \
               Gra_AdvanceDt.cpp  Poi_Close.cpp  Poi_Prepare_Pot.cpp  Poi_Prepare_Rho.cpp \
               Output_PreparedPatch_Poisson.cpp  Init_MemAllocate_PoissonGravity.cpp \
               End_MemFree_PoissonGravity.cpp  Init_Set_Default_SOR_Parameter.cpp  Init_GreenFuncK.cpp \
               Init_Set_Default_MG_Parameter.cpp  Poi_GetAverageDensity.cpp  Poi_AddExtraMassForGravity.cpp \
               Poi_BoundaryCondition_Extrapolation.cpp  Gra_Prepare_USG.cpp  Poi_StorePotWithGhostZone.cpp \
               Init_ExtAccPot.cpp  End_ExtAccPot.cpp  CPU_ExtAcc_PointMass.cpp  CPU_ExtPot_PointMass.cpp \
               Poi_UserWorkBeforePoisson.cpp  Init_LoadExtPotTable.cpp  CPU_ExtPot_Tabular.cpp

vpath %.cu     SelfGravity/GPU_Poisson  SelfGravity/GPU_Gravity
vpath %.cpp    SelfGravity/CPU_Poisson  SelfGravity/CPU_Gravity  SelfGravity
endif # GRAVITY


# particle source files (included only if "PARTICLE" is turned on)
# ------------------------------------------------------------------------------------
ifeq "$(filter -DPARTICLE, $(SIMU_OPTION))" "-DPARTICLE"
GPU_FILE    +=

CPU_FILE    += Par_Init_ByFunction.cpp  Par_Output_TextFile.cpp  Par_Output_BinaryFile.cpp  Par_FindHomePatch_UniformGrid.cpp \
               Par_Aux_Check_Particle.cpp  Par_PassParticle2Father.cpp  Par_CollectParticle2OneLevel.cpp \
               Par_MassAssignment.cpp  Par_UpdateParticle.cpp  Par_GetTimeStep_VelAcc.cpp \
               Par_PassParticle2Sibling.cpp  Par_CountParticleInDescendant.cpp  Par_Aux_GetConservedQuantity.cpp \
               Par_Aux_InitCheck.cpp  Par_Aux_Record_ParticleCount.cpp  Par_PassParticle2Son_MultiPatch.cpp \
               Par_Synchronize.cpp  Par_PredictPos.cpp  Par_Init_ByFile.cpp  Par_Init_Attribute.cpp \
               Par_AddParticleAfterInit.cpp  Par_PassParticle2Son_SinglePatch.cpp  Par_EquilibriumIC.cpp \
               Par_ScatterParticleData.cpp  Par_UpdateTracerParticle.cpp  Par_MapMesh2Particles.cpp

vpath %.cu     Particle/GPU
vpath %.cpp    Particle/CPU  Particle

ifeq "$(findstring -DLOAD_BALANCE, $(SIMU_OPTION))" "-DLOAD_BALANCE"
CPU_FILE    += Par_LB_SendParticleData.cpp  Par_LB_CollectParticle2OneLevel.cpp \
               Par_LB_CollectParticleFromRealPatch.cpp  Par_LB_RecordExchangeParticlePatchID.cpp \
               Par_LB_MapBuffer2RealPatch.cpp  Par_LB_ExchangeParticleBetweenPatch.cpp \
               Par_LB_Refine_SendParticle2Father.cpp

vpath %.cpp    Particle/LoadBalance
endif # LOAD_BALANCE

endif # PARTICLE


# parallelization source files (included only if "SERIAL" is turned off)
# ------------------------------------------------------------------------------------
ifeq "$(filter -DSERIAL, $(SIMU_OPTION))" ""
CPU_FILE    += Flu_AllocateFluxArray_Buffer.cpp

CPU_FILE    += Flag_Buffer.cpp  Refine_Buffer.cpp

CPU_FILE    += Buf_AllocateBufferPatch.cpp  Buf_AllocateBufferPatch_Base.cpp  Buf_GetBufferData.cpp \
               Buf_RecordExchangeDataPatchID.cpp  Buf_RecordExchangeFluxPatchID.cpp Buf_SortBoundaryPatch.cpp \
               Buf_RecordBoundaryFlag.cpp  Buf_RecordBoundaryPatch.cpp  Buf_RecordBoundaryPatch_Base.cpp \
               Buf_ResetBufferFlux.cpp

CPU_FILE    += MPI_ExchangeBoundaryFlag.cpp  MPI_ExchangeBufferPosition.cpp  MPI_ExchangeData.cpp \
               Init_MPI.cpp  MPI_Exit.cpp  MPI_Alltoallv_GAMER.cpp

CPU_FILE    += Output_BoundaryFlagList.cpp  Output_ExchangeDataPatchList.cpp  Output_ExchangeFluxPatchList.cpp \
               Output_ExchangePatchMap.cpp

CPU_FILE    += Aux_Record_BoundaryPatch.cpp

vpath %.cpp    Buffer  MPI
endif # !SERIAL


# load-balance source files (included only if "LOAD_BALANCE" is turned on)
# ------------------------------------------------------------------------------------
CPU_FILE    += LB_HilbertCurve.cpp  LB_Utility.cpp  LB_GatherTree.cpp

ifeq "$(findstring -DLOAD_BALANCE, $(SIMU_OPTION))" "-DLOAD_BALANCE"
CPU_FILE    += LB_Init_LoadBalance.cpp  LB_AllocateBufferPatch_Sibling.cpp  LB_RecordOvelapMPIPatchID.cpp \
               LB_Output_LBIdx.cpp  LB_AllocateBufferPatch_Father.cpp  LB_FindFather.cpp  LB_SiblingSearch.cpp \
               LB_RecordExchangeDataPatchID.cpp  LB_GetBufferData.cpp  LB_AllocateFluxArray.cpp \
               LB_RecordExchangeRestrictDataPatchID.cpp  LB_GrandsonCheck.cpp  LB_ExchangeFlaggedBuffer.cpp \
               LB_Refine.cpp  LB_Refine_GetNewRealPatchList.cpp  LB_Refine_AllocateNewPatch.cpp \
               LB_FindSonNotHome.cpp  LB_Refine_AllocateBufferPatch_Sibling.cpp \
               LB_AllocateBufferPatch_Sibling_Base.cpp  LB_RecordExchangeFixUpDataPatchID.cpp \
               LB_EstimateWorkload_AllPatchGroup.cpp  LB_EstimateLoadImbalance.cpp  LB_SetCutPoint.cpp \
               LB_Init_ByFunction.cpp  LB_Init_Refine.cpp

endif # LOAD_BALANCE

vpath %.cpp    LoadBalance


# yt inline analysis source files (included only if "SUPPORT_LIBYT" is turned on)
# ------------------------------------------------------------------------------------
ifeq "$(filter -DSUPPORT_LIBYT, $(SIMU_OPTION))" "-DSUPPORT_LIBYT"
CPU_FILE    += YT_Init.cpp  YT_End.cpp  YT_SetParameter.cpp  YT_AddLocalGrid.cpp  YT_Inline.cpp  YT_DerivedFunction.cpp \
               YT_GetParticleAttribute.cpp  YT_Miscellaneous.cpp

vpath %.cpp    YT
endif # SUPPORT_LIBYT


# local source terms source files
# ------------------------------------------------------------------------------------
GPU_FILE    += CUAPI_Asyn_SrcSolver.cu  CUSRC_SrcSolver_IterateAllCells.cu  CUSRC_Src_Deleptonization.cu \
               CUSRC_Src_User_Template.cu

CPU_FILE    += CPU_SrcSolver.cpp  CPU_SrcSolver_IterateAllCells.cpp  CPU_Src_Deleptonization.cpp \
               CPU_Src_User_Template.cpp

CPU_FILE    += Src_AdvanceDt.cpp  Src_Prepare.cpp  Src_Close.cpp  Src_Init.cpp  Src_End.cpp \
               Src_WorkBeforeMajorFunc.cpp

vpath %.cu     SourceTerms  SourceTerms/User_Template  SourceTerms/Deleptonization
vpath %.cpp    SourceTerms  SourceTerms/User_Template  SourceTerms/Deleptonization


# Grackle source files (included only if "SUPPORT_GRACKLE" is turned on)
# ------------------------------------------------------------------------------------
ifeq "$(filter -DSUPPORT_GRACKLE, $(SIMU_OPTION))" "-DSUPPORT_GRACKLE"
CPU_FILE    += CPU_GrackleSolver.cpp

CPU_FILE    += Grackle_Init.cpp  Grackle_End.cpp  Init_MemAllocate_Grackle.cpp  End_MemFree_Grackle.cpp \
               Grackle_Prepare.cpp  Grackle_Close.cpp  Grackle_Init_FieldData.cpp  Grackle_AdvanceDt.cpp

vpath %.cpp    Grackle  Grackle/CPU_Grackle
endif # SUPPORT_GRACKLE


# star formation source files (included only if "STAR_FORMATION" is turned on)
# ------------------------------------------------------------------------------------
ifeq "$(filter -DSTAR_FORMATION, $(SIMU_OPTION))" "-DSTAR_FORMATION"
CPU_FILE    += SF_CreateStar.cpp  SF_CreateStar_AGORA.cpp

vpath %.cpp    StarFormation
endif # STAR_FORMATION


# feedback source files (included only if "FEEDBACK" is turned on)
# ------------------------------------------------------------------------------------
ifeq "$(filter -DFEEDBACK, $(SIMU_OPTION))" "-DFEEDBACK"
CPU_FILE    += FB_AdvanceDt.cpp  FB_Init.cpp  FB_End.cpp  FB_Auxiliary.cpp  FB_User_Template.cpp  FB_SNe.cpp

vpath %.cpp    Feedback  Feedback/User_Template  Feedback/SNe
endif # FEEDBACK


# cosmic-ray source files (included only if "COSMIC_RAY" is turned on)
# ------------------------------------------------------------------------------------
ifeq "$(filter -DCOSMIC_RAY, $(SIMU_OPTION))" "-DCOSMIC_RAY"
CPU_FILE    += CPU_CosmicRay.cpp

GPU_FILE    += CUFLU_CosmicRay.cu
endif # COSMIC_RAY


# microphysics source files
# ------------------------------------------------------------------------------------
CPU_FILE    += Microphysics_Init.cpp  Microphysics_End.cpp

vpath %.cpp    Microphysics
vpath %.cu     Microphysics


# cosmic-ray diffusion source files (included only if "CR_DIFFUSION" is turned on)
# ------------------------------------------------------------------------------------
ifeq "$(filter -DCR_DIFFUSION, $(SIMU_OPTION))" "-DCR_DIFFUSION"
CPU_FILE    += CPU_CR_AddDiffuseFlux.cpp  CPU_CR_ComputeDiffusivity.cpp

GPU_FILE    += CUFLU_CR_AddDiffuseFlux.cu  CUFLU_CR_ComputeDiffusivity.cu

vpath %.cpp    Microphysics/CosmicRayDiffusion
vpath %.cu     Microphysics/CosmicRayDiffusion
endif # CR_DIFFUSION


# test problem source files
# --> just compile all .cpp and .cu files under TestProblem/*/*/
# ------------------------------------------------------------------------------------
CPU_FILE    += $(notdir $(wildcard TestProblem/*/*/*.cpp))
GPU_FILE    += $(notdir $(wildcard TestProblem/*/*/*.cu))

VPATH := $(dir $(wildcard TestProblem/*/*/))



# rules and targets
#######################################################################################################

# object files
# -------------------------------------------------------------------------------
# add filename prefixes to distinguish CPU and GPU object files
PREFIX_CPU   := __cpu__
PREFIX_GPU   := __gpu__
OBJ_PATH     := Object
OBJ_CPU      := $(patsubst %.cpp, $(OBJ_PATH)/$(PREFIX_CPU)%.o, $(CPU_FILE))
ifeq "$(filter -DGPU, $(SIMU_OPTION))" "-DGPU"
OBJ_GPU      := $(patsubst %.cu,  $(OBJ_PATH)/$(PREFIX_GPU)%.o, $(GPU_FILE))
OBJ_GPU_LINK := $(OBJ_PATH)/gpu_link.o
endif


# libraries
# -------------------------------------------------------------------------------
ifeq "$(filter -DGPU, $(SIMU_OPTION))" "-DGPU"
LIB += -L$(CUDA_PATH)/lib64
LIB += -Wl,-rpath=$(CUDA_PATH)/lib64
LIB += -lcudart
endif

ifeq "$(filter -DLAOHU, $(SIMU_OPTION))" "-DLAOHU"
LIB += -L$(GPUID_PATH) -lgpudevmgr
endif

ifeq "$(filter -DSUPPORT_FFTW=FFTW3, $(SIMU_OPTION))" "-DSUPPORT_FFTW=FFTW3"
   LIB += -L$(FFTW3_PATH)/lib
   LIB += -Wl,-rpath=$(FFTW3_PATH)/lib
   ifeq "$(filter -DSERIAL, $(SIMU_OPTION))" "-DSERIAL"
      LIB += -lfftw3 -lfftw3f -lm
   else
      LIB += -lfftw3_mpi -lfftw3 -lfftw3f_mpi -lfftw3f -lm
   endif

   ifeq "$(filter -DOPENMP, $(SIMU_OPTION))" "-DOPENMP"
      LIB += -lfftw3_omp -lfftw3f_omp
   endif
endif

ifeq "$(filter -DSUPPORT_FFTW=FFTW2, $(SIMU_OPTION))" "-DSUPPORT_FFTW=FFTW2"
   LIB += -L$(FFTW2_PATH)/lib
   LIB += -Wl,-rpath=$(FFTW2_PATH)/lib
   ifeq "$(filter -DFLOAT8, $(SIMU_OPTION))" "-DFLOAT8"
      ifeq "$(filter -DSERIAL, $(SIMU_OPTION))" "-DSERIAL"
         LIB += -ldrfftw -ldfftw
      else
         LIB += -ldrfftw_mpi -ldfftw_mpi -ldrfftw -ldfftw
      endif
   else
      ifeq "$(filter -DSERIAL, $(SIMU_OPTION))" "-DSERIAL"
         LIB += -lsrfftw -lsfftw
      else
         LIB += -lsrfftw_mpi -lsfftw_mpi -lsrfftw -lsfftw
      endif
   endif
endif

ifeq "$(filter -DSUPPORT_GRACKLE, $(SIMU_OPTION))" "-DSUPPORT_GRACKLE"
LIB += -L$(GRACKLE_PATH)/lib -lgrackle
LIB += -Wl,-rpath=$(GRACKLE_PATH)/lib
endif

ifeq "$(filter -DSUPPORT_HDF5, $(SIMU_OPTION))" "-DSUPPORT_HDF5"
LIB += -L$(HDF5_PATH)/lib -lhdf5
LIB += -Wl,-rpath=$(HDF5_PATH)/lib
endif

ifeq "$(filter -DSUPPORT_GSL, $(SIMU_OPTION))" "-DSUPPORT_GSL"
LIB += -L$(GSL_PATH)/lib -lgsl -lgslcblas
LIB += -Wl,-rpath=$(GSL_PATH)/lib
endif

ifeq "$(filter -DSUPPORT_LIBYT, $(SIMU_OPTION))" "-DSUPPORT_LIBYT"
LIB += -L$(LIBYT_PATH)/lib -lyt
LIB += -Wl,-rpath=$(LIBYT_PATH)/lib
endif


# headers
# -------------------------------------------------------------------------------
INCLUDE := -I../include

ifeq "$(filter -DMODEL=HYDRO, $(SIMU_OPTION))" "-DMODEL=HYDRO"
INCLUDE += -IModel_Hydro/GPU_Hydro
endif

ifeq "$(filter -DSERIAL, $(SIMU_OPTION))" ""
INCLUDE += -I$(MPI_PATH)/include
endif

ifeq "$(filter -DSUPPORT_FFTW=FFTW3, $(SIMU_OPTION))" "-DSUPPORT_FFTW=FFTW3"
INCLUDE += -I$(FFTW3_PATH)/include
endif

ifeq "$(filter -DSUPPORT_FFTW=FFTW2, $(SIMU_OPTION))" "-DSUPPORT_FFTW=FFTW2"
INCLUDE += -I$(FFTW2_PATH)/include
endif

ifeq "$(filter -DSUPPORT_GRACKLE, $(SIMU_OPTION))" "-DSUPPORT_GRACKLE"
INCLUDE += -I$(GRACKLE_PATH)/include
endif

ifeq "$(filter -DSUPPORT_HDF5, $(SIMU_OPTION))" "-DSUPPORT_HDF5"
INCLUDE += -I$(HDF5_PATH)/include
endif

ifeq "$(filter -DSUPPORT_GSL, $(SIMU_OPTION))" "-DSUPPORT_GSL"
INCLUDE += -I$(GSL_PATH)/include
endif

ifeq "$(filter -DSUPPORT_LIBYT, $(SIMU_OPTION))" "-DSUPPORT_LIBYT"
INCLUDE += -I$(LIBYT_PATH)/include
endif


# CXX flags
# -------------------------------------------------------------------------------
# remove the OpenMP flag if OPENMP is disabled
ifeq "$(filter -DOPENMP, $(SIMU_OPTION))" ""
   OPENMPFLAG =
endif

# fixes compilation issues on Intel MPI
ifeq "$(filter -DSERIAL, $(SIMU_OPTION))" ""
   CXXFLAG += -DMPICH_IGNORE_CXX_SEEK
endif

COMMONFLAG := $(INCLUDE) $(SIMU_OPTION)
CXXFLAG    += $(COMMONFLAG) $(OPENMPFLAG)

# grep git information
GIT_INFO    :=
GIT_FAIL    := $(shell git rev-parse 2>&1 | cat)
ifeq "$(GIT_FAIL)" ""
   GIT_INFO += -DGIT_COMMIT="`git rev-parse HEAD`"              # commit
   GIT_INFO += -DGIT_BRANCH="`git rev-parse --abbrev-ref HEAD`" # branch
else
   GIT_INFO += -DGIT_COMMIT="N/A"
   GIT_INFO += -DGIT_BRANCH="N/A"
endif

# NVCC flags
# -------------------------------------------------------------------------------
# common flags
NVCCFLAG_COM := $(COMMONFLAG) @@@NVCCFLAG_COM@@@

NVCCFLAG_ARCH += @@@NVCCFLAG_ARCH@@@

NVCCFLAG_COM += $(NVCCFLAG_ARCH)

# fluid solver flags
NVCCFLAG_FLU += @@@NVCCFLAG_FLU@@@ @@@MAXRREGCOUNT_FLU@@@

# Poisson/gravity solvers flags
NVCCFLAG_POT += @@@NVCCFLAG_POT@@@


# remove extra whitespaces
# -------------------------------------------------------------------------------
CXX          := $(strip $(CXX))
CXXFLAG      := $(strip $(CXXFLAG))
OPENMPFLAG   := $(strip $(OPENMPFLAG))
LIB          := $(strip $(LIB))
NVCC         := $(strip $(NVCC))
NVCCFLAG_COM := $(strip $(NVCCFLAG_COM))
NVCCFLAG_FLU := $(strip $(NVCCFLAG_FLU))
NVCCFLAG_POT := $(strip $(NVCCFLAG_POT))
GIT_INFO     := $(strip $(GIT_INFO))
CUDA_PATH    := $(strip $(CUDA_PATH))
FFTW2_PATH   := $(strip $(FFTW2_PATH))
FFTW3_PATH   := $(strip $(FFTW3_PATH))
MPI_PATH     := $(strip $(MPI_PATH))
HDF5_PATH    := $(strip $(HDF5_PATH))
GRACKLE_PATH := $(strip $(GRACKLE_PATH))
GSL_PATH     := $(strip $(GSL_PATH))
LIBYT_PATH   := $(strip $(LIBYT_PATH))


# implicit rules (do NOT modify the order of the following rules)
# -------------------------------------------------------------------------------
# output detailed compilation commands or not
ifeq "$(COMPILE_VERBOSE)" "0"
ECHO = @
else
ECHO =
endif

# GPU codes
ifeq "$(filter -DGPU, $(SIMU_OPTION))" "-DGPU"
$(OBJ_PATH)/$(PREFIX_GPU)CUFLU_%.o : CUFLU_%.cu
	@echo "Compiling $<"
	$(ECHO)$(NVCC) $(NVCCFLAG_COM) $(NVCCFLAG_FLU) -o $@ -dc $<

$(OBJ_PATH)/$(PREFIX_GPU)CUPOT_%.o : CUPOT_%.cu
	@echo "Compiling $<"
	$(ECHO)$(NVCC) $(NVCCFLAG_COM) $(NVCCFLAG_POT) -o $@ -dc $<

$(OBJ_PATH)/$(PREFIX_GPU)CUSRC_%.o : CUSRC_%.cu
	@echo "Compiling $<"
	$(ECHO)$(NVCC) $(NVCCFLAG_COM) -o $@ -dc $<

$(OBJ_PATH)/$(PREFIX_GPU)CUAPI_%.o : CUAPI_%.cu
	@echo "Compiling $<"
	$(ECHO)$(NVCC) $(NVCCFLAG_COM) -o $@ -dc $<

$(OBJ_PATH)/$(PREFIX_GPU)%.o : %.cu
	@echo "Compiling $<"
	$(ECHO)$(NVCC) $(NVCCFLAG_COM) -o $@ -dc $<
endif # GPU

# CPU codes
$(OBJ_PATH)/$(PREFIX_CPU)%.o : %.cpp
	@echo "Compiling $<"
	$(ECHO)$(CXX) $(CXXFLAG) $(GIT_INFO) -o $@ -c $<


# linking
# -------------------------------------------------------------------------------
$(EXECUTABLE) : $(OBJ_CPU) $(OBJ_GPU)
# GPU linker
ifeq "$(filter -DGPU, $(SIMU_OPTION))" "-DGPU"
	@echo "Linking GPU codes"
	$(ECHO)$(NVCC) -o $(OBJ_GPU_LINK) $(OBJ_GPU) $(NVCCFLAG_ARCH) -dlink
endif

# CPU linker
	@echo "Linking CPU codes"
ifeq "$(COMPILE_VERBOSE)" "1"
	$(CXX) -o $@ $^ $(OBJ_GPU_LINK) $(LIB) $(OPENMPFLAG)
	@printf "\nCompiling GAMER --> Successful!\n\n"; \
	cp $(EXECUTABLE) ../bin/
else
	@$(CXX) -o $@ $^ $(OBJ_GPU_LINK) $(LIB) $(OPENMPFLAG); \
	(if [ -e $@ ]; then \
		printf "\nCompiling GAMER --> Successful!\n\n"; \
		cp $(EXECUTABLE) ../bin/; \
	else \
		printf "\nCompiling GAMER --> Failed!\n\n"; \
	fi)
endif
	@rm -f ./*.linkinfo

# force re-compiling Aux_TakeNote.cpp to get the correct compilation time
	$(ECHO)mv $(OBJ_PATH)/$(PREFIX_CPU)Aux_TakeNote.o $(OBJ_PATH)/$(PREFIX_CPU)Aux_TakeNote_backup.o


# clean
# -------------------------------------------------------------------------------
.PHONY: clean
clean :
	@rm -f $(OBJ_PATH)/*
	@rm -f $(EXECUTABLE)
	@rm -f ./*.linkinfo
